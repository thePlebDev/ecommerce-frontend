WHAT NEEDS TO BE DONE:

----------------home page------------------------------
1) create the nav bar with navigation to the check out, with react router. (DONE)
2)tests
3)Create the image carousel components
4)tests

----------------individual cards-----------------------
1) create the  idividual  image card carousel
2) add reviews
3) add a buy button
4)tests

----------------checkout-------------------------------
1) create a form that has all the orders
2) add a remove order function
3)tests
4) launch


- so the first thing that is going to be create is the navbar, I will create that with material ui



MATERIAL UI:
- material ui needs to be installed
- so it looks like material ui has already styled components and then to alter them we can pass props, we can find out
what these props are on the docs.
- the Roboto font will not be automaticall loaded by Material-ui. so we have to put a link to the google font in our
index.html
- we add the recommended responsive meta tag to our header.
- there is also an optional css reset. you import CssBaseline  and then put it imbetween a react Fragement but I do not
know what A React Fragement is so, I will have to read up on it.

REACT FRAGMENTS:
- it is common for a React component to return multiple elements. Fragments let us group a list of children without adding
extra nodes to the dom. so then what is the dom and what are nodes
the dom: it connects web pages to scripts or programming languages by representing the structure of a document.The DOM
represents a document with a logical tree, each branch of the tree ends in a node, each node contains objects. DOM methods
allow programmatic access to the tree. with those nodes we can change the document's structure, style and content.
- so the DOM basically represents the page so that we can change the document structure, style and content. the DOM represents the
document as nodes and objects, that way, programming languages can connect to the page. so the dom is basically just
a big object that allows us to interat with the web page. nodes are just elements inside the DOM that we can grab on to and
manipulate.

- so when it says that React Fragments lets us group children without adding extra nodes to the DOM, it is saying that we
are getting structure for free and no space is being added to the DOM

ok so just to be clear what is a component in react: components are what lets us split up the code into more reuseable parts
what are elements in react: they are the smallest building block of React apps, an element describes what you
want to see on the screen. elements are what components are made of. React elements are immutable


THEMING:
- so we can customize material-UI with our own theme, themes let us applu a consistent tone to our app. by default
we get to choose from light and dark themes and initialy the light theme is used for us.
- if we wan to customize a theme we need to provide a ThemeProvider component in order to inject a theme into our
application
- when changing the theme we need to make sure that the themeProvider component is a parent component of the component
that we are trying to change the theme on, this is the only way that it will work.

OVER RIDING COMPONENTS:
there are 5 ways that components can be changed
1) specific variation for a one-time situation
2)synamic variation for a one-time situation
3)specific variation of a component
4)material design variation
5) global theme variation

1)
-so when we want to customize the navbar component we want to over ride somethings, we wont use themeing, that is for
styles, we need to
-so by the sounds of things we want to make a specific cariation for a one-time situation, so making one change to one
component

- the first wat to override the style of a component is to use class names, every component provides a className property
which is always applied to the root element
- one way to override is to use the withStyles() higher-order component to inject custom styles into the DOM, and to pass
the class name to the ClassNames component via its classes ptoperty

-so basically we use a higher order component called withStyles() to inject css styles into the DOM and pass the className
to the component via its props
-so we are injecting styles into the DOM via HOF(withStyles), then we pass the className to the component via props
-so I think I understand, I just need to figure out what styles I want to send them
- our NavBar just uses the AppBar.

- so what I want to do is override the styles so that I can make it so the checkout and home button are in the middle of
the navbar. The outer container that is holding them is in display flex, so I need to read more about that.
-so in our case the reason that it is displayed the way that it is, is because the h6 element is has a width of almost the
entire page, so I need to override this. so It doesnt appear to be the width but lets just start with that and see if
we can override it.
-so we will use the HOF(withStyles) to inject styles of the highest specificity to override the current styles.
- we then pass this new className to our component via the props system
- there is a weird little dependency called clsx, that is used for creating className strings conditionaly

- so the first thing that we do is create the styles, which will be created in an object called styles, that object
will have a property called, root that will calso be an object. The root object will have the styles on it.
- so it looks like the HOF withStyles does a little magic with the styles and the component
- so it injects the styles that we have written to the DOM and then it passes the className to the component via its
classes property
- so the withStyles HOF injects the styles into the DOM, then it passess the wanted class name to the component via the
classes prop

- there is also a children prop and I am not sure what it does.

children: sometimes a component doesnt know their children ahead of time. When that is the case, the special children
prop is used to pass children elements directly into their output. so when you use children in a component it means
that anything that is put between that componnets tags  are going to be rendered inside of it. So anything that is
passed between the opening and closing tag of the component tag is going to added to props as a child prop

- I actually already see that the NavBar is being styled with classes so I might as well just use thos classes

- so when the className property from material ui isnt enouhg we can take advantage of the classes object property
to customize all the css injected by Material-ui for a given component.
-so there seems to be alot of  style HOF and I will have to read more about them, because I have no idea what they are
about.

- so makeStyle is a hook generator that allows the creation of multiple style rules per style sheet. Each style rule has its own class name
- the class names are provided to the component with the classes varible. This is particularly useful when styling
nested elements in a component.
- so I think I got what I wanted and all I had to do was just over ride somethings, three hours of stufy for 5 mins of code

- now I should really read up more on the REACT router

REACT ROUTER:
-so react router helps us create single page applications but what are single page applciations, I should read up on that

- so a SPA ia an application that re-renders its content in response to navigation actions without making a request to the server
to fetch new HTML
- single page apps rely on a router. routers are made up of routes, which describe the location that they should match



HOW BROWSERS HANDLE LOCATIONS:
- each browser tab has a "browser context". the Browsing context maintains a "session history", which is essentially
an array of location entries.
- so basically the sessions storage keeps track of your past history
- when a browser navigates, a request is sent to a server and the browser uses the response to create a DOM
- as you click links and navigate through pages, the browser tab is building up a session history. each navigation
makes a request to a server and creates a new entry, including a new DOM


THE HISTORY API:
-it just provides an object that we can use useful methods and properties that let us nivigate back and forth through
the user's history, and manipulate the contents of the history stack.
- instead of creating a new DOM for every location the Histoy API re-uses the active DOM by updating it to reflect the
new location.


REACT ROUTER:
-when starting a new project, you need to determine which type of router to use. For browser based projects there are
<BrowserROuter> and <HashRouter> components.
- we should use BrowserROuter when our server will handle dynamic requests (know how to respond to any possible URL)
- HashRouter should be used for static websites(where the server can only respond to requests for filed  that is knows about )

- each router creates a history object. which
- the ROuter component only expects to recieve a single child element. so we wrap our App component with the router
tag

- so the route component is the main building block of React Router. Anywhere that we want to only render content based
on the location's pathname. We will use a <Route> element. the Route expects a path property and where that path
specifies the route will render a React component. we can use a <switch> component to groupd the <Routes> but the
switch will iterate over its children elements (the routes) and only render the first one that matches the current pathname

- so we create a <Switch/> element and then inside the elemnet tags we place all of our Route components and have them. render a path
as well as a component prop

-it can be useful to group routes that share a common prefix in the same component

PATH PARAMS:
- when there is a varible in a pathname that we want to capture, we use a path param, a path param being /roster/:number
it will capture whatever is in the number position and it will be stored in the props.match.params of the component

- we use the Link component to act as our anchor tag, when clicked it will update the URL and render the content that
we specified but without reloading the page. we have to provide a 'to' prop to the link with the path name so it knows
where to go when the link is clicked

- ok so now I begin implementing the react router, first I have to download it, then I have to wrap my app component with the Router, but why
- so we will wrap our app component inside of a BrowserROuter, the router can only have one component inside of it
and each router will create a history object. this history object will be used to keep track of the curent location
and re-render the website whenever that changes. Other components provided by react Router rely on having that history
object avilable through react's context, so they must be rendered as descendants of a router componnent. if a React Router
component that does not have a router as one of its ancestors will fail to work.
-we are using BrowserRouter because we are using a server that handles dynamic requests.

-so an application server will have a web framework running on top of it. For example, a Node application server
might be running Express. so basically a application server will have a framework running on the backend. That framework
is able to match requests and dynamically generate responses

- so the reason that we have to wrap our component with the router is becasue of the history object that the rest of the COMPONENTS
rely on.
- so now we have to create our routes . so routes can be created anywhere but often it makes sense to render them in the same place
- we can use the <Switch> component to gorup <Route>s. The <Switch/> will iterate overs its children elements(the routes) and
only render the first one that matches the current pathname.
- ok so basically we just use switch to group our routes and then the switch component will iterate over all the children
and only render the first one the matches the current path.

- ok so now we need to go into the app component and wrap everything we want to render in the switch component

-so now that we have our switch component we need to add the individual Routes. The Route will render our component, and we
can even pass it a function if we need it to give a component more props
- since we dont have any extra props to pass to our components we will just use the component prop and not the render one

- we have to put the exact prop on the route that has the path to the home page so that it only matches that path
when it is exactly / and not /home
- we can also create an error page but just providing a <Route> component with no path

- so now I need links. I just provide the 'to' prop and state the url that it is going to and
- so now I will push to git hub
- then I will put into play the basic tests and then I will make simple tests and then push again


TESTING NOTES:

- the import statement: the import statement is used to inport read only live bindings which are exported from another
module.  imported modules are in strict mode
ok so what is strict mode
strict mode: is a way to opt in to a restricted variant of Javasript and opting-out of "sloppy mode". browsers that do
not support strict mode will run strict mode code differently, so make sure to add feature testing
strict mode does this: eliminates some Javascript silent error by changing them to throw errors,fixes mistakes that make it
difficult for Javascript engines to perform optimizations: strict mode code can sometimes be made to run faster than
identical code that's not strict mode, prohibits some syntax likely to be defined in future versions
- so basically it is a way to make javascript a little better an more defined as a language

export:
- is used when creating javascript modules to export live bindings to functions, objects, or primative values form the module
so they can be used by other programs with the import statement. there are two different types of export, named and defualt
- we can have multiple named exports per module but only one default export

code orginization:
- if we have any constants we should organize them into a folder all by themselves
- why we name everything index.js? this is a node.js thing,the index file is the entry point to a module

- so you always want to make your index.js the point for entry. so if you have multiple button components, you want to be
able to access them through the index.js file. instead of import submitButton from buttons/submitButtom
- the proper convention would be. import {submitButton} from buttons. so we would have the button folder and then
we would have the index.js file inside of that folder along with all of the specific button components. We then export those buttons
from there files and import them into the index.js where we do a named export on them.
- so basically we should just always remember that index.js should always be the point of entry.

PROPSTYPES:
-all the prop types that we passed from a parent component to a child component get validated based on the PropTypes
interfaces assignd to the child component. we can make all of our componnets type safe with PropTypes
- so first we have to impoer propTypes
- when an invalid value is provided for a prop, a warning will be shown in the Javascript console.For performance
reasons, propTYpes is only checked in development mode
- we can define default values for your props by assigning to the special defaultProps
- so basically to check our proptypes in development we go like this
        componentName.propTypes = {
        nameOfProp: PropType.validator
        }

- the validator can be any of the prop validators that React provides
- for the moment in our application we do not need to do any prop validation.

UNIT TESTING WITH ENZYME TESTING:
- so first we have to install enzyme with react
- enzyme introduces adapters that we will have to set up depending on the version of React that we use
- so now we need to set up the adapter I think

- so the first thing we will be running a shallow test
- so the shallow rendering is usefull to constrian to testing the component as a unit and to ensure that the tests arent
indirectly assertuung on behaviour of children components. it also doesnt call React lifecycle methods like componentDidMount

-before we can start testing we need to create a setupTest.js file in our src folder, this is what is must of meant when it said,
that this file had to be top level.
-ok but what is an adapter. it lets us abstract away anything that changes based on the React version
- unit testing is just testing one component at a time

- snapshot testing, jest snapshots are like those old text UIs with windows and buttons made of text characters: it's a rendered output
of your component stored in a text file.
- jest will store snap shots of the code in in test files and will compare them when you update the code

- so jest is the test runner that will run the tests, finding the test files running them an making a nice output in the terminal
- enzyme is a library that is needed to test the react components

- we create the setupTest.js folder and we have to set up the enzyme adapter, I think I have that done

- so shallow rendering just to make sure that the component is rendering properly.
-to make sure we are getting the app to render we are going to use the .fin() mehtod that enzyme provides us.
- the find method takes a EnzymeSelector and this is just whatever we put as a css class inside of the component. It returns a new
wrapper that wraps the found nodes.


WHAT TO TEST:
-testing anything that takes user input is a good idea

1) it must render : at the very least, make sure the component renders without error

2) test the output : make sure that it renders the correct thing. given certain props, what output is to be expected

3) test the states: Every conditional should be accounted for. If the className are conditional(warning/success) make
sure to test that the classNmae-deciding logic is working right. Likewise for conditionally rendered children: if a logout
button is only visible when the user is logged in, make sure to test that

4) Test the events : if the component can be interacted with, button,onclick,onchange, test that the events works as
expected and call the specified function with the correct arguments

5) Test the edge cases: anything that operates on an array could have boundary cases.


-when it comes down to testing there are two 'ends' of testing, which are unit testing and end to end testing.
- an end to end test will be more focused on user interaction and dealing with inputs, events and the like.
- unit testing of an application usually foucuses on the smallest units of an application, and generally aims to
determine correctness, "does a function return the right value"

- the standard tool for testing React applications is Jest. so jest is a little heavy for a begginer the guy is saying.
so we will be using mocha and the React testing library called enzyme

- mocha is a well known and flexible text runner that we can use to run our Javascript tests on the server
- so I guess you can use enxyze to test React native too.
-so for this testing enviroment we will be using babel and webpack

What is babel:
-ok so babel is a toolchain that is mainly used to convert ECMAScript 2015 + code into a backwards compatible
version of javascript in current and older browsers or enviroments
- so so basically it takes the new javascirpt code and turns it into old style code to make sure that older browsers
can use it.

What is webpack:
-webpack is a module bundler. Webpack can take scar of bundling alongside a seperate task runner
- so we installed babel-core and babel-loader
- so babel-core, which is the core library of babel
- the babel-loader is a loader plugin for Webpack
- the rest of the libraries are presets for Babel that allow tuning and customization

-so now we need to create a .babelrc folder in the root directory. the .babelrc file is the local configuration of our
project. it will effect all files that Babel processes that are in the same directory so make sure it is in the root

-so now we will set up the Webpack, which is a module bunding tool that we can use to ensure all of our different files get
combined into one meaningful file we can use in the browser. Babael and Webpack both deserve there own tutorials

WEBPACK:
- the smallest project we can bundle with webpack consists of input and output. so when we use webpack, it traverses the
imports constructing a dependency graph of the project and then generates output based on the configuration. a dependency
graph is a directed graph that describes how nodes relate to eachother.


TESTING WITH JEST AND ENZYME:
- both jest and enzyme are specifically designed to test React applications, jest can be used with any other javascript
app but only works with react
- jest can be used without Enzyme but Enzyme simply adds additional functionality
- enzyme can be used without Jest but it must be paired with another thes runner if jest is not used

- so create react app already installs jest for us and I am pretty sure that we already have Enzyme installed but we
still need to install enzyme-to-json

-so this says that we need to update our package.json file since we downloaded the enzyme-to-json/serializer
-enzyme-to-json provides a better component format for snapshot comparison that Enzymes internal component representation
- it allows us to minimise code duplication when working with snapshots,so I guess this only applies to snapshot testing

- so Jest will look for tests with .test.js as the suffix

- so I think I installed a diffrent version of webpack and React is now yelling at me for it. so I don't think we need
to install webpack when we use create react app
- ya so under the hood React create-react-app uses Babel and webPack but we don't need to know anything about them.
- so to use create-react-app we run npx, but what even is npx?
- so npx simplifies things that were a bit harder in npm
- npx lets you is good for calling things that need to be installed globally. this is great for things like create-react-app
because the get updated to frequently npx allows us to install it locally each time we need to use it, so it will never
be out of dat. it basically lets us install things without having them pollute the global namespace

- when we run npm install just by its self it downloads dependencies defined in a package.json file and generates a
node_modules folder with the installed modules.

MOUNTING:
- full DOM rendering including child components
- this is ideal for use cases where we have components that may interact with DOM API or use React lifecycle
methods in order to fully test the component
- unmount should be called after each tests affecting each other
- allows access to both props directly passed into the root component and props passed into child components


SHALLOW:
-renders only the dingle component, not including its children. This is useful to isolate the component
for pure unit testing. It protects against changes or bugs in a child component altering the behavior or
output of the component under test
- shallow components do have access to lifecycle methods by default
- cannot access props passed into the root component, but can those passed into child components and can test
the effect of props passed into the root component. this is as with shallow(<Component/>), youre testing
what Component renders, not the element we passed into shallow

RENDER:
-renders to static HTML including children
- does not have access to React lifecycle methods
- less costly than mount but provides less functionality

- the snapshot file contains a layout that matches the name of the test
- so on our get component we call getElements() and it returns the wrapped ReactElements and then we call .toMatchSnapshot() and that
passes the test
- so this seems like the basics for starting a react test. just need to render it and then see if it matches the snap shots.
 
